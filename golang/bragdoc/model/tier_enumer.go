// Code generated by "enumer -type=Tier"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _TierName = "GreatMajorStrongModerateLightSlightMinorMicro"

var _TierIndex = [...]uint8{0, 5, 10, 16, 24, 29, 35, 40, 45}

const _TierLowerName = "greatmajorstrongmoderatelightslightminormicro"

func (i Tier) String() string {
	i -= 100
	if i < 0 || i >= Tier(len(_TierIndex)-1) {
		return fmt.Sprintf("Tier(%d)", i+100)
	}
	return _TierName[_TierIndex[i]:_TierIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TierNoOp() {
	var x [1]struct{}
	_ = x[Great-(100)]
	_ = x[Major-(101)]
	_ = x[Strong-(102)]
	_ = x[Moderate-(103)]
	_ = x[Light-(104)]
	_ = x[Slight-(105)]
	_ = x[Minor-(106)]
	_ = x[Micro-(107)]
}

var _TierValues = []Tier{Great, Major, Strong, Moderate, Light, Slight, Minor, Micro}

var _TierNameToValueMap = map[string]Tier{
	_TierName[0:5]:        Great,
	_TierLowerName[0:5]:   Great,
	_TierName[5:10]:       Major,
	_TierLowerName[5:10]:  Major,
	_TierName[10:16]:      Strong,
	_TierLowerName[10:16]: Strong,
	_TierName[16:24]:      Moderate,
	_TierLowerName[16:24]: Moderate,
	_TierName[24:29]:      Light,
	_TierLowerName[24:29]: Light,
	_TierName[29:35]:      Slight,
	_TierLowerName[29:35]: Slight,
	_TierName[35:40]:      Minor,
	_TierLowerName[35:40]: Minor,
	_TierName[40:45]:      Micro,
	_TierLowerName[40:45]: Micro,
}

var _TierNames = []string{
	_TierName[0:5],
	_TierName[5:10],
	_TierName[10:16],
	_TierName[16:24],
	_TierName[24:29],
	_TierName[29:35],
	_TierName[35:40],
	_TierName[40:45],
}

// TierString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TierString(s string) (Tier, error) {
	if val, ok := _TierNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TierNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Tier values", s)
}

// TierValues returns all values of the enum
func TierValues() []Tier {
	return _TierValues
}

// TierStrings returns a slice of all String values of the enum
func TierStrings() []string {
	strs := make([]string, len(_TierNames))
	copy(strs, _TierNames)
	return strs
}

// IsATier returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Tier) IsATier() bool {
	for _, v := range _TierValues {
		if i == v {
			return true
		}
	}
	return false
}
