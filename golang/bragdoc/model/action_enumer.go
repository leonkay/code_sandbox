// Code generated by "enumer -type=Action"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _ActionName = "JoinLeaveLogAddRemoveUpdateSwitch"

var _ActionIndex = [...]uint8{0, 4, 9, 12, 15, 21, 27, 33}

const _ActionLowerName = "joinleavelogaddremoveupdateswitch"

func (i Action) String() string {
	i -= 1
	if i < 0 || i >= Action(len(_ActionIndex)-1) {
		return fmt.Sprintf("Action(%d)", i+1)
	}
	return _ActionName[_ActionIndex[i]:_ActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionNoOp() {
	var x [1]struct{}
	_ = x[Join-(1)]
	_ = x[Leave-(2)]
	_ = x[Log-(3)]
	_ = x[Add-(4)]
	_ = x[Remove-(5)]
	_ = x[Update-(6)]
	_ = x[Switch-(7)]
}

var _ActionValues = []Action{Join, Leave, Log, Add, Remove, Update, Switch}

var _ActionNameToValueMap = map[string]Action{
	_ActionName[0:4]:        Join,
	_ActionLowerName[0:4]:   Join,
	_ActionName[4:9]:        Leave,
	_ActionLowerName[4:9]:   Leave,
	_ActionName[9:12]:       Log,
	_ActionLowerName[9:12]:  Log,
	_ActionName[12:15]:      Add,
	_ActionLowerName[12:15]: Add,
	_ActionName[15:21]:      Remove,
	_ActionLowerName[15:21]: Remove,
	_ActionName[21:27]:      Update,
	_ActionLowerName[21:27]: Update,
	_ActionName[27:33]:      Switch,
	_ActionLowerName[27:33]: Switch,
}

var _ActionNames = []string{
	_ActionName[0:4],
	_ActionName[4:9],
	_ActionName[9:12],
	_ActionName[12:15],
	_ActionName[15:21],
	_ActionName[21:27],
	_ActionName[27:33],
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// ActionStrings returns a slice of all String values of the enum
func ActionStrings() []string {
	strs := make([]string, len(_ActionNames))
	copy(strs, _ActionNames)
	return strs
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}
