// Code generated by "enumer -type=Action"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _ActionName = "SetClearUpdateLogSwitch"

var _ActionIndex = [...]uint8{0, 3, 8, 14, 17, 23}

const _ActionLowerName = "setclearupdatelogswitch"

func (i Action) String() string {
	i -= 1
	if i < 0 || i >= Action(len(_ActionIndex)-1) {
		return fmt.Sprintf("Action(%d)", i+1)
	}
	return _ActionName[_ActionIndex[i]:_ActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionNoOp() {
	var x [1]struct{}
	_ = x[Set-(1)]
	_ = x[Clear-(2)]
	_ = x[Update-(3)]
	_ = x[Log-(4)]
	_ = x[Switch-(5)]
}

var _ActionValues = []Action{Set, Clear, Update, Log, Switch}

var _ActionNameToValueMap = map[string]Action{
	_ActionName[0:3]:        Set,
	_ActionLowerName[0:3]:   Set,
	_ActionName[3:8]:        Clear,
	_ActionLowerName[3:8]:   Clear,
	_ActionName[8:14]:       Update,
	_ActionLowerName[8:14]:  Update,
	_ActionName[14:17]:      Log,
	_ActionLowerName[14:17]: Log,
	_ActionName[17:23]:      Switch,
	_ActionLowerName[17:23]: Switch,
}

var _ActionNames = []string{
	_ActionName[0:3],
	_ActionName[3:8],
	_ActionName[8:14],
	_ActionName[14:17],
	_ActionName[17:23],
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// ActionStrings returns a slice of all String values of the enum
func ActionStrings() []string {
	strs := make([]string, len(_ActionNames))
	copy(strs, _ActionNames)
	return strs
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}
